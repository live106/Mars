package com.live106.mars.protocol.util;

import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyAgreement;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.interfaces.DHPrivateKey;
import javax.crypto.interfaces.DHPublicKey;
import javax.crypto.spec.DHParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class ProtocolCrypto {

	// 非对称密钥算法
	public static final String KEY_ALGORITHM = "DH";
	// 本地密钥算法，即对称加密算法。可选des，aes，desede
	public static final String SECRET_ALGORITHM = "AES";

	/**
	 * 密钥长度，DH算法的默认密钥长度是1024 密钥长度必须是64的倍数，在512到1024位之间
	 */
	private static final int KEY_SIZE = 512;
	private static final String PUBLIC_KEY = "PublicKey";
	private static final String PRIVATE_KEY = "PrivateKey";

	/**
	 * @return
	 * @throws NoSuchAlgorithmException 
	 */
	public static Map<String, Object> generateKey() throws NoSuchAlgorithmException {
		// 实例化密钥生成器
		KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(KEY_ALGORITHM);
		// 初始化密钥生成器
		keyPairGenerator.initialize(KEY_SIZE);
		// 生成密钥对
		KeyPair keyPair = keyPairGenerator.generateKeyPair();
		// 甲方公钥
		DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();
		// 甲方私钥
		DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();
		// 将密钥存储在map中
		Map<String, Object> keyMap = new HashMap<String, Object>();
		keyMap.put(PUBLIC_KEY, publicKey);
		keyMap.put(PRIVATE_KEY, privateKey);
		return keyMap;
	}

	/**
	 * 私钥
	 * 
	 * @param keyMap
	 * @return
	 */
	public static byte[] getPrivateKey(Map<String, Object> keyMap) {
		Key key = (Key) keyMap.get(PRIVATE_KEY);
		return key.getEncoded();
	}

	/**
	 * 公钥
	 * 
	 * @param keyMap
	 * @return
	 * @throws Exception
	 */
	public static byte[] getPublicKey(Map<String, Object> keyMap) {
		Key key = (Key) keyMap.get(PUBLIC_KEY);
		return key.getEncoded();
	}

	/**
	 * 根据公钥生成密钥对
	 * 
	 * @param key
	 * @return
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidKeySpecException 
	 * @throws InvalidAlgorithmParameterException 
	 * @throws Exception
	 */
	public static Map<String, Object> generateKey(byte[] key) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidAlgorithmParameterException {
		// 解析甲方的公钥
		// 转换公钥的材料
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(key);
		// 实例化密钥工厂
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
		// 产生公钥
		PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);
		// 由甲方的公钥构造乙方密钥
		DHParameterSpec dhParamSpec = ((DHPublicKey) pubKey).getParams();
		// 实例化密钥生成器
		KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(keyFactory.getAlgorithm());
		// 初始化密钥生成器
		keyPairGenerator.initialize(dhParamSpec);
		// 产生密钥对
		KeyPair keyPair = keyPairGenerator.genKeyPair();
		// 乙方公钥
		DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();
		// 乙方私钥
		DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();
		// 将密钥存储在Map中
		Map<String, Object> keyMap = new HashMap<String, Object>();
		keyMap.put(PUBLIC_KEY, publicKey);
		keyMap.put(PRIVATE_KEY, privateKey);
		return keyMap;
	}

	/**
	 * 加密
	 * 
	 * @param data待加密数据
	 * @param key
	 *            密钥
	 * @return byte[] 加密数据
	 */
	public static byte[] encrypt(byte[] data, byte[] key) throws Exception {
		// 生成本地密钥
		SecretKey secretKey = new SecretKeySpec(key, SECRET_ALGORITHM);
		// 数据加密
		Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm());
		cipher.init(Cipher.ENCRYPT_MODE, secretKey);
		return cipher.doFinal(data);
	}

	/**
	 * 解密
	 * 
	 * @param data
	 *            待解密数据
	 * @param key
	 *            密钥
	 * @return byte[] 解密数据
	 * @throws NoSuchPaddingException 
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidKeyException 
	 * @throws BadPaddingException 
	 * @throws IllegalBlockSizeException 
	 */
	public static byte[] decrypt(byte[] data, byte[] key) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
		// 生成本地密钥
		SecretKey secretKey = new SecretKeySpec(key, SECRET_ALGORITHM);
		// 数据解密
		Cipher cipher = Cipher.getInstance(secretKey.getAlgorithm());
		cipher.init(Cipher.DECRYPT_MODE, secretKey);
		return cipher.doFinal(data);
	}

	/**
	 * 构建密钥
	 * 
	 * @param publicKey
	 *            公钥
	 * @param privateKey
	 *            私钥
	 * @return byte[] 本地密钥
	 * @throws NoSuchAlgorithmException 
	 * @throws InvalidKeySpecException 
	 * @throws IllegalStateException 
	 * @throws InvalidKeyException 
	 */
	public static byte[] getSecretKey(byte[] publicKey, byte[] privateKey) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, IllegalStateException {
		// 实例化密钥工厂
		KeyFactory keyFactory = KeyFactory.getInstance(KEY_ALGORITHM);
		// 初始化公钥
		// 密钥材料转换
		X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKey);
		// 产生公钥
		PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);
		// 初始化私钥
		// 密钥材料转换
		PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKey);
		// 产生私钥
		PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);
		// 实例化
		KeyAgreement keyAgree = KeyAgreement.getInstance(keyFactory.getAlgorithm());
		// 初始化
		keyAgree.init(priKey);
		keyAgree.doPhase(pubKey, true);
		// 生成本地密钥
		SecretKey secretKey = keyAgree.generateSecret(SECRET_ALGORITHM);
		return secretKey.getEncoded();
	}

	/**
	 * @param args
	 * @throws Exception
	 */
	public static void main(String[] args) throws Exception {
		// 生成甲方的密钥对
		Map<String, Object> keyMap1 = ProtocolCrypto.generateKey();
		// 甲方的公钥 、 甲方的私钥
		byte[] publicKey1 = ProtocolCrypto.getPublicKey(keyMap1);
		byte[] privateKey1 = ProtocolCrypto.getPrivateKey(keyMap1);
		System.out.println("甲方公钥：" + Base64.getEncoder().encodeToString(publicKey1));
		System.out.println("甲方私钥：" + Base64.getEncoder().encodeToString(privateKey1));
		// 由甲方的公钥产生的密钥对
		Map<String, Object> keyMap2 = ProtocolCrypto.generateKey(publicKey1);
		byte[] publicKey2 = ProtocolCrypto.getPublicKey(keyMap2);
		byte[] privateKey2 = ProtocolCrypto.getPrivateKey(keyMap2);
		System.out.println("乙方公钥：" + Base64.getEncoder().encodeToString(publicKey2));
		System.out.println("乙方私钥：" + Base64.getEncoder().encodeToString(privateKey2));
		// ====================================================================//
		// 组装甲方的本地加密密钥,由乙方的公钥和甲方的私钥组合而成
		byte[] key1 = ProtocolCrypto.getSecretKey(publicKey2, privateKey1);
		System.out.println("甲方的本地密钥：" + Base64.getEncoder().encodeToString(key1));
		// 组装乙方的本地加密密钥，由甲方的公钥和乙方的私钥组合而成
		byte[] key2 = ProtocolCrypto.getSecretKey(publicKey1, privateKey2);
		System.out.println("乙方的本地密钥：" + Base64.getEncoder().encodeToString(key2));
		// ====================================================================//
		String str = "www.what21.com";
		// 甲方进行数据的加密
		byte[] code1 = ProtocolCrypto.encrypt(str.getBytes(), key1);
		System.out.println("加密后的数据：" + Base64.getEncoder().encodeToString(code1));
		// ====================================================================//
		// 乙方进行数据的解密
		byte[] decode1 = ProtocolCrypto.decrypt(code1, key2);
		System.out.println("乙方解密后的数据：" + new String(decode1) + "/n/n");
		// ====================================================================//
		str = "http://www.what21.com/";
		// 使用乙方本地密钥对数据进行加密
		byte[] code2 = ProtocolCrypto.encrypt(str.getBytes(), key2);
		System.out.println("乙方加密后的数据：" + Base64.getEncoder().encodeToString(code2));
		// ====================================================================//
		// 甲方使用本地密钥对数据进行解密
		byte[] decode2 = ProtocolCrypto.decrypt(code2, key1);
		System.out.println("甲方解密后的数据：" + new String(decode2));
		
		System.err.println(Base64.getEncoder().encodeToString(key1));
		System.err.println(Base64.getEncoder().encodeToString(key2));
	}

}