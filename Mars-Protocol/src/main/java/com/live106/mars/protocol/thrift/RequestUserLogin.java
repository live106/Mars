/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.live106.mars.protocol.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-26")
public class RequestUserLogin implements org.apache.thrift.TBase<RequestUserLogin, RequestUserLogin._Fields>, java.io.Serializable, Cloneable, Comparable<RequestUserLogin> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestUserLogin");

  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SDK_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkUid", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SDK_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("sdkToken", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RequestUserLoginStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RequestUserLoginTupleSchemeFactory());
  }

  private String username; // required
  private String password; // required
  private String sdkUid; // required
  private String sdkToken; // required
  private String machineId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERNAME((short)1, "username"),
    PASSWORD((short)2, "password"),
    SDK_UID((short)3, "sdkUid"),
    SDK_TOKEN((short)4, "sdkToken"),
    MACHINE_ID((short)5, "machineId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERNAME
          return USERNAME;
        case 2: // PASSWORD
          return PASSWORD;
        case 3: // SDK_UID
          return SDK_UID;
        case 4: // SDK_TOKEN
          return SDK_TOKEN;
        case 5: // MACHINE_ID
          return MACHINE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SDK_UID, new org.apache.thrift.meta_data.FieldMetaData("sdkUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SDK_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("sdkToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestUserLogin.class, metaDataMap);
  }

  public RequestUserLogin() {
  }

  public RequestUserLogin(
    String username,
    String password,
    String sdkUid,
    String sdkToken,
    String machineId)
  {
    this();
    this.username = username;
    this.password = password;
    this.sdkUid = sdkUid;
    this.sdkToken = sdkToken;
    this.machineId = machineId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestUserLogin(RequestUserLogin other) {
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    if (other.isSetSdkUid()) {
      this.sdkUid = other.sdkUid;
    }
    if (other.isSetSdkToken()) {
      this.sdkToken = other.sdkToken;
    }
    if (other.isSetMachineId()) {
      this.machineId = other.machineId;
    }
  }

  public RequestUserLogin deepCopy() {
    return new RequestUserLogin(this);
  }

  @Override
  public void clear() {
    this.username = null;
    this.password = null;
    this.sdkUid = null;
    this.sdkToken = null;
    this.machineId = null;
  }

  public String getUsername() {
    return this.username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public String getSdkUid() {
    return this.sdkUid;
  }

  public void setSdkUid(String sdkUid) {
    this.sdkUid = sdkUid;
  }

  public void unsetSdkUid() {
    this.sdkUid = null;
  }

  /** Returns true if field sdkUid is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkUid() {
    return this.sdkUid != null;
  }

  public void setSdkUidIsSet(boolean value) {
    if (!value) {
      this.sdkUid = null;
    }
  }

  public String getSdkToken() {
    return this.sdkToken;
  }

  public void setSdkToken(String sdkToken) {
    this.sdkToken = sdkToken;
  }

  public void unsetSdkToken() {
    this.sdkToken = null;
  }

  /** Returns true if field sdkToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSdkToken() {
    return this.sdkToken != null;
  }

  public void setSdkTokenIsSet(boolean value) {
    if (!value) {
      this.sdkToken = null;
    }
  }

  public String getMachineId() {
    return this.machineId;
  }

  public void setMachineId(String machineId) {
    this.machineId = machineId;
  }

  public void unsetMachineId() {
    this.machineId = null;
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return this.machineId != null;
  }

  public void setMachineIdIsSet(boolean value) {
    if (!value) {
      this.machineId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((String)value);
      }
      break;

    case SDK_UID:
      if (value == null) {
        unsetSdkUid();
      } else {
        setSdkUid((String)value);
      }
      break;

    case SDK_TOKEN:
      if (value == null) {
        unsetSdkToken();
      } else {
        setSdkToken((String)value);
      }
      break;

    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case SDK_UID:
      return getSdkUid();

    case SDK_TOKEN:
      return getSdkToken();

    case MACHINE_ID:
      return getMachineId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case SDK_UID:
      return isSetSdkUid();
    case SDK_TOKEN:
      return isSetSdkToken();
    case MACHINE_ID:
      return isSetMachineId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestUserLogin)
      return this.equals((RequestUserLogin)that);
    return false;
  }

  public boolean equals(RequestUserLogin that) {
    if (that == null)
      return false;

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_sdkUid = true && this.isSetSdkUid();
    boolean that_present_sdkUid = true && that.isSetSdkUid();
    if (this_present_sdkUid || that_present_sdkUid) {
      if (!(this_present_sdkUid && that_present_sdkUid))
        return false;
      if (!this.sdkUid.equals(that.sdkUid))
        return false;
    }

    boolean this_present_sdkToken = true && this.isSetSdkToken();
    boolean that_present_sdkToken = true && that.isSetSdkToken();
    if (this_present_sdkToken || that_present_sdkToken) {
      if (!(this_present_sdkToken && that_present_sdkToken))
        return false;
      if (!this.sdkToken.equals(that.sdkToken))
        return false;
    }

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (!this.machineId.equals(that.machineId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_username = true && (isSetUsername());
    list.add(present_username);
    if (present_username)
      list.add(username);

    boolean present_password = true && (isSetPassword());
    list.add(present_password);
    if (present_password)
      list.add(password);

    boolean present_sdkUid = true && (isSetSdkUid());
    list.add(present_sdkUid);
    if (present_sdkUid)
      list.add(sdkUid);

    boolean present_sdkToken = true && (isSetSdkToken());
    list.add(present_sdkToken);
    if (present_sdkToken)
      list.add(sdkToken);

    boolean present_machineId = true && (isSetMachineId());
    list.add(present_machineId);
    if (present_machineId)
      list.add(machineId);

    return list.hashCode();
  }

  @Override
  public int compareTo(RequestUserLogin other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkUid()).compareTo(other.isSetSdkUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkUid, other.sdkUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSdkToken()).compareTo(other.isSetSdkToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSdkToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sdkToken, other.sdkToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestUserLogin(");
    boolean first = true;

    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sdkUid:");
    if (this.sdkUid == null) {
      sb.append("null");
    } else {
      sb.append(this.sdkUid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sdkToken:");
    if (this.sdkToken == null) {
      sb.append("null");
    } else {
      sb.append(this.sdkToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("machineId:");
    if (this.machineId == null) {
      sb.append("null");
    } else {
      sb.append(this.machineId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestUserLoginStandardSchemeFactory implements SchemeFactory {
    public RequestUserLoginStandardScheme getScheme() {
      return new RequestUserLoginStandardScheme();
    }
  }

  private static class RequestUserLoginStandardScheme extends StandardScheme<RequestUserLogin> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestUserLogin struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SDK_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sdkUid = iprot.readString();
              struct.setSdkUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SDK_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sdkToken = iprot.readString();
              struct.setSdkTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineId = iprot.readString();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestUserLogin struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(struct.password);
        oprot.writeFieldEnd();
      }
      if (struct.sdkUid != null) {
        oprot.writeFieldBegin(SDK_UID_FIELD_DESC);
        oprot.writeString(struct.sdkUid);
        oprot.writeFieldEnd();
      }
      if (struct.sdkToken != null) {
        oprot.writeFieldBegin(SDK_TOKEN_FIELD_DESC);
        oprot.writeString(struct.sdkToken);
        oprot.writeFieldEnd();
      }
      if (struct.machineId != null) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeString(struct.machineId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestUserLoginTupleSchemeFactory implements SchemeFactory {
    public RequestUserLoginTupleScheme getScheme() {
      return new RequestUserLoginTupleScheme();
    }
  }

  private static class RequestUserLoginTupleScheme extends TupleScheme<RequestUserLogin> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestUserLogin struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUsername()) {
        optionals.set(0);
      }
      if (struct.isSetPassword()) {
        optionals.set(1);
      }
      if (struct.isSetSdkUid()) {
        optionals.set(2);
      }
      if (struct.isSetSdkToken()) {
        optionals.set(3);
      }
      if (struct.isSetMachineId()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetSdkUid()) {
        oprot.writeString(struct.sdkUid);
      }
      if (struct.isSetSdkToken()) {
        oprot.writeString(struct.sdkToken);
      }
      if (struct.isSetMachineId()) {
        oprot.writeString(struct.machineId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestUserLogin struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sdkUid = iprot.readString();
        struct.setSdkUidIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sdkToken = iprot.readString();
        struct.setSdkTokenIsSet(true);
      }
      if (incoming.get(4)) {
        struct.machineId = iprot.readString();
        struct.setMachineIdIsSet(true);
      }
    }
  }

}

