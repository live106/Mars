/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.live106.mars.protocol.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-26")
public class ProtocolHeader implements org.apache.thrift.TBase<ProtocolHeader, ProtocolHeader._Fields>, java.io.Serializable, Cloneable, Comparable<ProtocolHeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProtocolHeader");

  private static final org.apache.thrift.protocol.TField TARGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("targetType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SERIALIZE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serializeType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField PROTOCOL_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("protocolHash", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BYTE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProtocolHeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProtocolHeaderTupleSchemeFactory());
  }

  private PeerType targetType; // required
  private PeerType sourceType; // required
  private int targetId; // required
  private int sourceId; // required
  private long channelId; // required
  private SerializeType serializeType; // required
  private int protocolHash; // required
  private byte flag; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PeerType
     */
    TARGET_TYPE((short)1, "targetType"),
    /**
     * 
     * @see PeerType
     */
    SOURCE_TYPE((short)2, "sourceType"),
    TARGET_ID((short)3, "targetId"),
    SOURCE_ID((short)4, "sourceId"),
    CHANNEL_ID((short)5, "channelId"),
    /**
     * 
     * @see SerializeType
     */
    SERIALIZE_TYPE((short)6, "serializeType"),
    PROTOCOL_HASH((short)7, "protocolHash"),
    FLAG((short)8, "flag");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_TYPE
          return TARGET_TYPE;
        case 2: // SOURCE_TYPE
          return SOURCE_TYPE;
        case 3: // TARGET_ID
          return TARGET_ID;
        case 4: // SOURCE_ID
          return SOURCE_ID;
        case 5: // CHANNEL_ID
          return CHANNEL_ID;
        case 6: // SERIALIZE_TYPE
          return SERIALIZE_TYPE;
        case 7: // PROTOCOL_HASH
          return PROTOCOL_HASH;
        case 8: // FLAG
          return FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TARGETID_ISSET_ID = 0;
  private static final int __SOURCEID_ISSET_ID = 1;
  private static final int __CHANNELID_ISSET_ID = 2;
  private static final int __PROTOCOLHASH_ISSET_ID = 3;
  private static final int __FLAG_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("targetType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PeerType.class)));
    tmpMap.put(_Fields.SOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PeerType.class)));
    tmpMap.put(_Fields.TARGET_ID, new org.apache.thrift.meta_data.FieldMetaData("targetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SERIALIZE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serializeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SerializeType.class)));
    tmpMap.put(_Fields.PROTOCOL_HASH, new org.apache.thrift.meta_data.FieldMetaData("protocolHash", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProtocolHeader.class, metaDataMap);
  }

  public ProtocolHeader() {
    this.targetType = com.live106.mars.protocol.thrift.PeerType.PEER_TYPE_DEFAULT;

    this.sourceType = com.live106.mars.protocol.thrift.PeerType.PEER_TYPE_CLIENT;

    this.serializeType = com.live106.mars.protocol.thrift.SerializeType.SERIALIZE_TYPE_THRIFT;

  }

  public ProtocolHeader(
    PeerType targetType,
    PeerType sourceType,
    int targetId,
    int sourceId,
    long channelId,
    SerializeType serializeType,
    int protocolHash,
    byte flag)
  {
    this();
    this.targetType = targetType;
    this.sourceType = sourceType;
    this.targetId = targetId;
    setTargetIdIsSet(true);
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
    this.channelId = channelId;
    setChannelIdIsSet(true);
    this.serializeType = serializeType;
    this.protocolHash = protocolHash;
    setProtocolHashIsSet(true);
    this.flag = flag;
    setFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProtocolHeader(ProtocolHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTargetType()) {
      this.targetType = other.targetType;
    }
    if (other.isSetSourceType()) {
      this.sourceType = other.sourceType;
    }
    this.targetId = other.targetId;
    this.sourceId = other.sourceId;
    this.channelId = other.channelId;
    if (other.isSetSerializeType()) {
      this.serializeType = other.serializeType;
    }
    this.protocolHash = other.protocolHash;
    this.flag = other.flag;
  }

  public ProtocolHeader deepCopy() {
    return new ProtocolHeader(this);
  }

  @Override
  public void clear() {
    this.targetType = com.live106.mars.protocol.thrift.PeerType.PEER_TYPE_DEFAULT;

    this.sourceType = com.live106.mars.protocol.thrift.PeerType.PEER_TYPE_CLIENT;

    setTargetIdIsSet(false);
    this.targetId = 0;
    setSourceIdIsSet(false);
    this.sourceId = 0;
    setChannelIdIsSet(false);
    this.channelId = 0;
    this.serializeType = com.live106.mars.protocol.thrift.SerializeType.SERIALIZE_TYPE_THRIFT;

    setProtocolHashIsSet(false);
    this.protocolHash = 0;
    setFlagIsSet(false);
    this.flag = 0;
  }

  /**
   * 
   * @see PeerType
   */
  public PeerType getTargetType() {
    return this.targetType;
  }

  /**
   * 
   * @see PeerType
   */
  public void setTargetType(PeerType targetType) {
    this.targetType = targetType;
  }

  public void unsetTargetType() {
    this.targetType = null;
  }

  /** Returns true if field targetType is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetType() {
    return this.targetType != null;
  }

  public void setTargetTypeIsSet(boolean value) {
    if (!value) {
      this.targetType = null;
    }
  }

  /**
   * 
   * @see PeerType
   */
  public PeerType getSourceType() {
    return this.sourceType;
  }

  /**
   * 
   * @see PeerType
   */
  public void setSourceType(PeerType sourceType) {
    this.sourceType = sourceType;
  }

  public void unsetSourceType() {
    this.sourceType = null;
  }

  /** Returns true if field sourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceType() {
    return this.sourceType != null;
  }

  public void setSourceTypeIsSet(boolean value) {
    if (!value) {
      this.sourceType = null;
    }
  }

  public int getTargetId() {
    return this.targetId;
  }

  public void setTargetId(int targetId) {
    this.targetId = targetId;
    setTargetIdIsSet(true);
  }

  public void unsetTargetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  /** Returns true if field targetId is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetId() {
    return EncodingUtils.testBit(__isset_bitfield, __TARGETID_ISSET_ID);
  }

  public void setTargetIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TARGETID_ISSET_ID, value);
  }

  public int getSourceId() {
    return this.sourceId;
  }

  public void setSourceId(int sourceId) {
    this.sourceId = sourceId;
    setSourceIdIsSet(true);
  }

  public void unsetSourceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  /** Returns true if field sourceId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceId() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCEID_ISSET_ID);
  }

  public void setSourceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEID_ISSET_ID, value);
  }

  public long getChannelId() {
    return this.channelId;
  }

  public void setChannelId(long channelId) {
    this.channelId = channelId;
    setChannelIdIsSet(true);
  }

  public void unsetChannelId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return EncodingUtils.testBit(__isset_bitfield, __CHANNELID_ISSET_ID);
  }

  public void setChannelIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHANNELID_ISSET_ID, value);
  }

  /**
   * 
   * @see SerializeType
   */
  public SerializeType getSerializeType() {
    return this.serializeType;
  }

  /**
   * 
   * @see SerializeType
   */
  public void setSerializeType(SerializeType serializeType) {
    this.serializeType = serializeType;
  }

  public void unsetSerializeType() {
    this.serializeType = null;
  }

  /** Returns true if field serializeType is set (has been assigned a value) and false otherwise */
  public boolean isSetSerializeType() {
    return this.serializeType != null;
  }

  public void setSerializeTypeIsSet(boolean value) {
    if (!value) {
      this.serializeType = null;
    }
  }

  public int getProtocolHash() {
    return this.protocolHash;
  }

  public void setProtocolHash(int protocolHash) {
    this.protocolHash = protocolHash;
    setProtocolHashIsSet(true);
  }

  public void unsetProtocolHash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROTOCOLHASH_ISSET_ID);
  }

  /** Returns true if field protocolHash is set (has been assigned a value) and false otherwise */
  public boolean isSetProtocolHash() {
    return EncodingUtils.testBit(__isset_bitfield, __PROTOCOLHASH_ISSET_ID);
  }

  public void setProtocolHashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROTOCOLHASH_ISSET_ID, value);
  }

  public byte getFlag() {
    return this.flag;
  }

  public void setFlag(byte flag) {
    this.flag = flag;
    setFlagIsSet(true);
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET_TYPE:
      if (value == null) {
        unsetTargetType();
      } else {
        setTargetType((PeerType)value);
      }
      break;

    case SOURCE_TYPE:
      if (value == null) {
        unsetSourceType();
      } else {
        setSourceType((PeerType)value);
      }
      break;

    case TARGET_ID:
      if (value == null) {
        unsetTargetId();
      } else {
        setTargetId((Integer)value);
      }
      break;

    case SOURCE_ID:
      if (value == null) {
        unsetSourceId();
      } else {
        setSourceId((Integer)value);
      }
      break;

    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((Long)value);
      }
      break;

    case SERIALIZE_TYPE:
      if (value == null) {
        unsetSerializeType();
      } else {
        setSerializeType((SerializeType)value);
      }
      break;

    case PROTOCOL_HASH:
      if (value == null) {
        unsetProtocolHash();
      } else {
        setProtocolHash((Integer)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Byte)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_TYPE:
      return getTargetType();

    case SOURCE_TYPE:
      return getSourceType();

    case TARGET_ID:
      return Integer.valueOf(getTargetId());

    case SOURCE_ID:
      return Integer.valueOf(getSourceId());

    case CHANNEL_ID:
      return Long.valueOf(getChannelId());

    case SERIALIZE_TYPE:
      return getSerializeType();

    case PROTOCOL_HASH:
      return Integer.valueOf(getProtocolHash());

    case FLAG:
      return Byte.valueOf(getFlag());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET_TYPE:
      return isSetTargetType();
    case SOURCE_TYPE:
      return isSetSourceType();
    case TARGET_ID:
      return isSetTargetId();
    case SOURCE_ID:
      return isSetSourceId();
    case CHANNEL_ID:
      return isSetChannelId();
    case SERIALIZE_TYPE:
      return isSetSerializeType();
    case PROTOCOL_HASH:
      return isSetProtocolHash();
    case FLAG:
      return isSetFlag();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProtocolHeader)
      return this.equals((ProtocolHeader)that);
    return false;
  }

  public boolean equals(ProtocolHeader that) {
    if (that == null)
      return false;

    boolean this_present_targetType = true && this.isSetTargetType();
    boolean that_present_targetType = true && that.isSetTargetType();
    if (this_present_targetType || that_present_targetType) {
      if (!(this_present_targetType && that_present_targetType))
        return false;
      if (!this.targetType.equals(that.targetType))
        return false;
    }

    boolean this_present_sourceType = true && this.isSetSourceType();
    boolean that_present_sourceType = true && that.isSetSourceType();
    if (this_present_sourceType || that_present_sourceType) {
      if (!(this_present_sourceType && that_present_sourceType))
        return false;
      if (!this.sourceType.equals(that.sourceType))
        return false;
    }

    boolean this_present_targetId = true;
    boolean that_present_targetId = true;
    if (this_present_targetId || that_present_targetId) {
      if (!(this_present_targetId && that_present_targetId))
        return false;
      if (this.targetId != that.targetId)
        return false;
    }

    boolean this_present_sourceId = true;
    boolean that_present_sourceId = true;
    if (this_present_sourceId || that_present_sourceId) {
      if (!(this_present_sourceId && that_present_sourceId))
        return false;
      if (this.sourceId != that.sourceId)
        return false;
    }

    boolean this_present_channelId = true;
    boolean that_present_channelId = true;
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (this.channelId != that.channelId)
        return false;
    }

    boolean this_present_serializeType = true && this.isSetSerializeType();
    boolean that_present_serializeType = true && that.isSetSerializeType();
    if (this_present_serializeType || that_present_serializeType) {
      if (!(this_present_serializeType && that_present_serializeType))
        return false;
      if (!this.serializeType.equals(that.serializeType))
        return false;
    }

    boolean this_present_protocolHash = true;
    boolean that_present_protocolHash = true;
    if (this_present_protocolHash || that_present_protocolHash) {
      if (!(this_present_protocolHash && that_present_protocolHash))
        return false;
      if (this.protocolHash != that.protocolHash)
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_targetType = true && (isSetTargetType());
    list.add(present_targetType);
    if (present_targetType)
      list.add(targetType.getValue());

    boolean present_sourceType = true && (isSetSourceType());
    list.add(present_sourceType);
    if (present_sourceType)
      list.add(sourceType.getValue());

    boolean present_targetId = true;
    list.add(present_targetId);
    if (present_targetId)
      list.add(targetId);

    boolean present_sourceId = true;
    list.add(present_sourceId);
    if (present_sourceId)
      list.add(sourceId);

    boolean present_channelId = true;
    list.add(present_channelId);
    if (present_channelId)
      list.add(channelId);

    boolean present_serializeType = true && (isSetSerializeType());
    list.add(present_serializeType);
    if (present_serializeType)
      list.add(serializeType.getValue());

    boolean present_protocolHash = true;
    list.add(present_protocolHash);
    if (present_protocolHash)
      list.add(protocolHash);

    boolean present_flag = true;
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    return list.hashCode();
  }

  @Override
  public int compareTo(ProtocolHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTargetType()).compareTo(other.isSetTargetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetType, other.targetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceType()).compareTo(other.isSetSourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceType, other.sourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetId()).compareTo(other.isSetTargetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetId, other.targetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceId()).compareTo(other.isSetSourceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceId, other.sourceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChannelId()).compareTo(other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerializeType()).compareTo(other.isSetSerializeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerializeType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serializeType, other.serializeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtocolHash()).compareTo(other.isSetProtocolHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtocolHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocolHash, other.protocolHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProtocolHeader(");
    boolean first = true;

    sb.append("targetType:");
    if (this.targetType == null) {
      sb.append("null");
    } else {
      sb.append(this.targetType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceType:");
    if (this.sourceType == null) {
      sb.append("null");
    } else {
      sb.append(this.sourceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetId:");
    sb.append(this.targetId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sourceId:");
    sb.append(this.sourceId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelId:");
    sb.append(this.channelId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("serializeType:");
    if (this.serializeType == null) {
      sb.append("null");
    } else {
      sb.append(this.serializeType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("protocolHash:");
    sb.append(this.protocolHash);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetProtocolHash()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'protocolHash' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProtocolHeaderStandardSchemeFactory implements SchemeFactory {
    public ProtocolHeaderStandardScheme getScheme() {
      return new ProtocolHeaderStandardScheme();
    }
  }

  private static class ProtocolHeaderStandardScheme extends StandardScheme<ProtocolHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProtocolHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetType = com.live106.mars.protocol.thrift.PeerType.findByValue(iprot.readI32());
              struct.setTargetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceType = com.live106.mars.protocol.thrift.PeerType.findByValue(iprot.readI32());
              struct.setSourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetId = iprot.readI32();
              struct.setTargetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceId = iprot.readI32();
              struct.setSourceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.channelId = iprot.readI64();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERIALIZE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serializeType = com.live106.mars.protocol.thrift.SerializeType.findByValue(iprot.readI32());
              struct.setSerializeTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PROTOCOL_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.protocolHash = iprot.readI32();
              struct.setProtocolHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.flag = iprot.readByte();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProtocolHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.targetType != null) {
        oprot.writeFieldBegin(TARGET_TYPE_FIELD_DESC);
        oprot.writeI32(struct.targetType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.sourceType != null) {
        oprot.writeFieldBegin(SOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.sourceType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TARGET_ID_FIELD_DESC);
      oprot.writeI32(struct.targetId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SOURCE_ID_FIELD_DESC);
      oprot.writeI32(struct.sourceId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
      oprot.writeI64(struct.channelId);
      oprot.writeFieldEnd();
      if (struct.serializeType != null) {
        oprot.writeFieldBegin(SERIALIZE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serializeType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PROTOCOL_HASH_FIELD_DESC);
      oprot.writeI32(struct.protocolHash);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeByte(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProtocolHeaderTupleSchemeFactory implements SchemeFactory {
    public ProtocolHeaderTupleScheme getScheme() {
      return new ProtocolHeaderTupleScheme();
    }
  }

  private static class ProtocolHeaderTupleScheme extends TupleScheme<ProtocolHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProtocolHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.protocolHash);
      BitSet optionals = new BitSet();
      if (struct.isSetTargetType()) {
        optionals.set(0);
      }
      if (struct.isSetSourceType()) {
        optionals.set(1);
      }
      if (struct.isSetTargetId()) {
        optionals.set(2);
      }
      if (struct.isSetSourceId()) {
        optionals.set(3);
      }
      if (struct.isSetChannelId()) {
        optionals.set(4);
      }
      if (struct.isSetSerializeType()) {
        optionals.set(5);
      }
      if (struct.isSetFlag()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTargetType()) {
        oprot.writeI32(struct.targetType.getValue());
      }
      if (struct.isSetSourceType()) {
        oprot.writeI32(struct.sourceType.getValue());
      }
      if (struct.isSetTargetId()) {
        oprot.writeI32(struct.targetId);
      }
      if (struct.isSetSourceId()) {
        oprot.writeI32(struct.sourceId);
      }
      if (struct.isSetChannelId()) {
        oprot.writeI64(struct.channelId);
      }
      if (struct.isSetSerializeType()) {
        oprot.writeI32(struct.serializeType.getValue());
      }
      if (struct.isSetFlag()) {
        oprot.writeByte(struct.flag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProtocolHeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.protocolHash = iprot.readI32();
      struct.setProtocolHashIsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.targetType = com.live106.mars.protocol.thrift.PeerType.findByValue(iprot.readI32());
        struct.setTargetTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceType = com.live106.mars.protocol.thrift.PeerType.findByValue(iprot.readI32());
        struct.setSourceTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetId = iprot.readI32();
        struct.setTargetIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sourceId = iprot.readI32();
        struct.setSourceIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.channelId = iprot.readI64();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.serializeType = com.live106.mars.protocol.thrift.SerializeType.findByValue(iprot.readI32());
        struct.setSerializeTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.flag = iprot.readByte();
        struct.setFlagIsSet(true);
      }
    }
  }

}

