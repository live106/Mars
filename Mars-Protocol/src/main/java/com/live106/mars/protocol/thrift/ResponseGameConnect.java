/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.live106.mars.protocol.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-10-26")
public class ResponseGameConnect implements org.apache.thrift.TBase<ResponseGameConnect, ResponseGameConnect._Fields>, java.io.Serializable, Cloneable, Comparable<ResponseGameConnect> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ResponseGameConnect");

  private static final org.apache.thrift.protocol.TField RESULT_FIELD_DESC = new org.apache.thrift.protocol.TField("result", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PLAYERID_FIELD_DESC = new org.apache.thrift.protocol.TField("playerid", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RANDOM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("randomName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ResponseGameConnectStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ResponseGameConnectTupleSchemeFactory());
  }

  private boolean result; // required
  private String msg; // required
  private int playerid; // required
  private String randomName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT((short)1, "result"),
    MSG((short)2, "msg"),
    PLAYERID((short)3, "playerid"),
    RANDOM_NAME((short)4, "randomName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT
          return RESULT;
        case 2: // MSG
          return MSG;
        case 3: // PLAYERID
          return PLAYERID;
        case 4: // RANDOM_NAME
          return RANDOM_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESULT_ISSET_ID = 0;
  private static final int __PLAYERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT, new org.apache.thrift.meta_data.FieldMetaData("result", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PLAYERID, new org.apache.thrift.meta_data.FieldMetaData("playerid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RANDOM_NAME, new org.apache.thrift.meta_data.FieldMetaData("randomName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ResponseGameConnect.class, metaDataMap);
  }

  public ResponseGameConnect() {
  }

  public ResponseGameConnect(
    boolean result,
    String msg,
    int playerid,
    String randomName)
  {
    this();
    this.result = result;
    setResultIsSet(true);
    this.msg = msg;
    this.playerid = playerid;
    setPlayeridIsSet(true);
    this.randomName = randomName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ResponseGameConnect(ResponseGameConnect other) {
    __isset_bitfield = other.__isset_bitfield;
    this.result = other.result;
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    this.playerid = other.playerid;
    if (other.isSetRandomName()) {
      this.randomName = other.randomName;
    }
  }

  public ResponseGameConnect deepCopy() {
    return new ResponseGameConnect(this);
  }

  @Override
  public void clear() {
    setResultIsSet(false);
    this.result = false;
    this.msg = null;
    setPlayeridIsSet(false);
    this.playerid = 0;
    this.randomName = null;
  }

  public boolean isResult() {
    return this.result;
  }

  public void setResult(boolean result) {
    this.result = result;
    setResultIsSet(true);
  }

  public void unsetResult() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  /** Returns true if field result is set (has been assigned a value) and false otherwise */
  public boolean isSetResult() {
    return EncodingUtils.testBit(__isset_bitfield, __RESULT_ISSET_ID);
  }

  public void setResultIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESULT_ISSET_ID, value);
  }

  public String getMsg() {
    return this.msg;
  }

  public void setMsg(String msg) {
    this.msg = msg;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public int getPlayerid() {
    return this.playerid;
  }

  public void setPlayerid(int playerid) {
    this.playerid = playerid;
    setPlayeridIsSet(true);
  }

  public void unsetPlayerid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  /** Returns true if field playerid is set (has been assigned a value) and false otherwise */
  public boolean isSetPlayerid() {
    return EncodingUtils.testBit(__isset_bitfield, __PLAYERID_ISSET_ID);
  }

  public void setPlayeridIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PLAYERID_ISSET_ID, value);
  }

  public String getRandomName() {
    return this.randomName;
  }

  public void setRandomName(String randomName) {
    this.randomName = randomName;
  }

  public void unsetRandomName() {
    this.randomName = null;
  }

  /** Returns true if field randomName is set (has been assigned a value) and false otherwise */
  public boolean isSetRandomName() {
    return this.randomName != null;
  }

  public void setRandomNameIsSet(boolean value) {
    if (!value) {
      this.randomName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESULT:
      if (value == null) {
        unsetResult();
      } else {
        setResult((Boolean)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case PLAYERID:
      if (value == null) {
        unsetPlayerid();
      } else {
        setPlayerid((Integer)value);
      }
      break;

    case RANDOM_NAME:
      if (value == null) {
        unsetRandomName();
      } else {
        setRandomName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT:
      return Boolean.valueOf(isResult());

    case MSG:
      return getMsg();

    case PLAYERID:
      return Integer.valueOf(getPlayerid());

    case RANDOM_NAME:
      return getRandomName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESULT:
      return isSetResult();
    case MSG:
      return isSetMsg();
    case PLAYERID:
      return isSetPlayerid();
    case RANDOM_NAME:
      return isSetRandomName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ResponseGameConnect)
      return this.equals((ResponseGameConnect)that);
    return false;
  }

  public boolean equals(ResponseGameConnect that) {
    if (that == null)
      return false;

    boolean this_present_result = true;
    boolean that_present_result = true;
    if (this_present_result || that_present_result) {
      if (!(this_present_result && that_present_result))
        return false;
      if (this.result != that.result)
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_playerid = true;
    boolean that_present_playerid = true;
    if (this_present_playerid || that_present_playerid) {
      if (!(this_present_playerid && that_present_playerid))
        return false;
      if (this.playerid != that.playerid)
        return false;
    }

    boolean this_present_randomName = true && this.isSetRandomName();
    boolean that_present_randomName = true && that.isSetRandomName();
    if (this_present_randomName || that_present_randomName) {
      if (!(this_present_randomName && that_present_randomName))
        return false;
      if (!this.randomName.equals(that.randomName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_result = true;
    list.add(present_result);
    if (present_result)
      list.add(result);

    boolean present_msg = true && (isSetMsg());
    list.add(present_msg);
    if (present_msg)
      list.add(msg);

    boolean present_playerid = true;
    list.add(present_playerid);
    if (present_playerid)
      list.add(playerid);

    boolean present_randomName = true && (isSetRandomName());
    list.add(present_randomName);
    if (present_randomName)
      list.add(randomName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ResponseGameConnect other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResult()).compareTo(other.isSetResult());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResult()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.result, other.result);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlayerid()).compareTo(other.isSetPlayerid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlayerid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.playerid, other.playerid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRandomName()).compareTo(other.isSetRandomName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRandomName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.randomName, other.randomName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ResponseGameConnect(");
    boolean first = true;

    sb.append("result:");
    sb.append(this.result);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msg:");
    if (this.msg == null) {
      sb.append("null");
    } else {
      sb.append(this.msg);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("playerid:");
    sb.append(this.playerid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("randomName:");
    if (this.randomName == null) {
      sb.append("null");
    } else {
      sb.append(this.randomName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetResult()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'result' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResponseGameConnectStandardSchemeFactory implements SchemeFactory {
    public ResponseGameConnectStandardScheme getScheme() {
      return new ResponseGameConnectStandardScheme();
    }
  }

  private static class ResponseGameConnectStandardScheme extends StandardScheme<ResponseGameConnect> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ResponseGameConnect struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.result = iprot.readBool();
              struct.setResultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PLAYERID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.playerid = iprot.readI32();
              struct.setPlayeridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RANDOM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.randomName = iprot.readString();
              struct.setRandomNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ResponseGameConnect struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RESULT_FIELD_DESC);
      oprot.writeBool(struct.result);
      oprot.writeFieldEnd();
      if (struct.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        oprot.writeString(struct.msg);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAYERID_FIELD_DESC);
      oprot.writeI32(struct.playerid);
      oprot.writeFieldEnd();
      if (struct.randomName != null) {
        oprot.writeFieldBegin(RANDOM_NAME_FIELD_DESC);
        oprot.writeString(struct.randomName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResponseGameConnectTupleSchemeFactory implements SchemeFactory {
    public ResponseGameConnectTupleScheme getScheme() {
      return new ResponseGameConnectTupleScheme();
    }
  }

  private static class ResponseGameConnectTupleScheme extends TupleScheme<ResponseGameConnect> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ResponseGameConnect struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.result);
      BitSet optionals = new BitSet();
      if (struct.isSetMsg()) {
        optionals.set(0);
      }
      if (struct.isSetPlayerid()) {
        optionals.set(1);
      }
      if (struct.isSetRandomName()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetPlayerid()) {
        oprot.writeI32(struct.playerid);
      }
      if (struct.isSetRandomName()) {
        oprot.writeString(struct.randomName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ResponseGameConnect struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.result = iprot.readBool();
      struct.setResultIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.playerid = iprot.readI32();
        struct.setPlayeridIsSet(true);
      }
      if (incoming.get(2)) {
        struct.randomName = iprot.readString();
        struct.setRandomNameIsSet(true);
      }
    }
  }

}

